{"/home/travis/build/npmtest/node-npmtest-peerflix/test.js":"/* istanbul instrument in package npmtest_peerflix */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-peerflix/lib.npmtest_peerflix.js":"/* istanbul instrument in package npmtest_peerflix */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_peerflix = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_peerflix = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-peerflix/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-peerflix && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_peerflix */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_peerflix\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_peerflix.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_peerflix.rollup.js'] =\n            local.assetsDict['/assets.npmtest_peerflix.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_peerflix.__dirname + '/lib.npmtest_peerflix.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-peerflix/node_modules/peerflix/index.js":"var torrentStream = require('torrent-stream')\nvar http = require('http')\nvar fs = require('fs')\nvar rangeParser = require('range-parser')\nvar xtend = require('xtend')\nvar url = require('url')\nvar mime = require('mime')\nvar pump = require('pump')\n\nvar parseBlocklist = function (filename) {\n  // TODO: support gzipped files\n  var blocklistData = fs.readFileSync(filename, { encoding: 'utf8' })\n  var blocklist = []\n  blocklistData.split('\\n').forEach(function (line) {\n    var match = null\n    if ((match = /^\\s*[^#].*?\\s*:\\s*([a-f0-9.:]+?)\\s*-\\s*([a-f0-9.:]+?)\\s*$/.exec(line))) {\n      blocklist.push({\n        start: match[1],\n        end: match[2]\n      })\n    }\n  })\n  return blocklist\n}\n\nvar truthy = function () {\n  return true\n}\n\nvar createServer = function (e, opts) {\n  var server = http.createServer()\n  var index = opts.index\n  var getType = opts.type || mime.lookup.bind(mime)\n  var filter = opts.filter || truthy\n\n  var onready = function () {\n    if (typeof index !== 'number') {\n      index = e.files.reduce(function (a, b) {\n        return a.length > b.length ? a : b\n      })\n      index = e.files.indexOf(index)\n    }\n\n    e.files[index].select()\n    server.index = e.files[index]\n\n    if (opts.sort) e.files.sort(opts.sort)\n  }\n\n  if (e.torrent) onready()\n  else e.on('ready', onready)\n\n  server.on('request', function (request, response) {\n    var u = url.parse(request.url)\n    var host = request.headers.host || 'localhost'\n\n    var toPlaylist = function () {\n      var toEntry = function (file, i) {\n        return '#EXTINF:-1,' + file.path + '\\n' + 'http://' + host + '/' + i\n      }\n\n      return '#EXTM3U\\n' + e.files.filter(filter).map(toEntry).join('\\n')\n    }\n\n    var toJSON = function () {\n      var totalPeers = e.swarm.wires\n\n      var activePeers = totalPeers.filter(function (wire) {\n        return !wire.peerChoking\n      })\n\n      var totalLength = e.files.reduce(function (prevFileLength, currFile) {\n        return prevFileLength + currFile.length\n      }, 0)\n\n      var toEntry = function (file, i) {\n        return {\n          name: file.name,\n          url: 'http://' + host + '/' + i,\n          length: file.length\n        }\n      }\n\n      var swarmStats = {\n        totalLength: totalLength,\n        downloaded: e.swarm.downloaded,\n        uploaded: e.swarm.uploaded,\n        downloadSpeed: parseInt(e.swarm.downloadSpeed(), 10),\n        uploadSpeed: parseInt(e.swarm.uploadSpeed(), 10),\n        totalPeers: totalPeers.length,\n        activePeers: activePeers.length,\n        files: e.files.filter(filter).map(toEntry)\n      }\n\n      return JSON.stringify(swarmStats, null, '  ')\n    }\n\n    // Allow CORS requests to specify arbitrary headers, e.g. 'Range',\n    // by responding to the OPTIONS preflight request with the specified\n    // origin and requested headers.\n    if (request.method === 'OPTIONS' && request.headers['access-control-request-headers']) {\n      response.setHeader('Access-Control-Allow-Origin', request.headers.origin)\n      response.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS')\n      response.setHeader(\n          'Access-Control-Allow-Headers',\n          request.headers['access-control-request-headers'])\n      response.setHeader('Access-Control-Max-Age', '1728000')\n\n      response.end()\n      return\n    }\n\n    if (request.headers.origin) response.setHeader('Access-Control-Allow-Origin', request.headers.origin)\n    if (u.pathname === '/') u.pathname = '/' + index\n\n    if (u.pathname === '/favicon.ico') {\n      response.statusCode = 404\n      response.end()\n      return\n    }\n\n    if (u.pathname === '/.json') {\n      var json = toJSON()\n      response.setHeader('Content-Type', 'application/json; charset=utf-8')\n      response.setHeader('Content-Length', Buffer.byteLength(json))\n      response.end(json)\n      return\n    }\n\n    if (u.pathname === '/.m3u') {\n      var playlist = toPlaylist()\n      response.setHeader('Content-Type', 'application/x-mpegurl; charset=utf-8')\n      response.setHeader('Content-Length', Buffer.byteLength(playlist))\n      response.end(playlist)\n      return\n    }\n\n    e.files.forEach(function (file, i) {\n      if (u.pathname.slice(1) === file.name) u.pathname = '/' + i\n    })\n\n    var i = Number(u.pathname.slice(1))\n\n    if (isNaN(i) || i >= e.files.length) {\n      response.statusCode = 404\n      response.end()\n      return\n    }\n\n    var file = e.files[i]\n    var range = request.headers.range\n    range = range && rangeParser(file.length, range)[0]\n    response.setHeader('Accept-Ranges', 'bytes')\n    response.setHeader('Content-Type', getType(file.name))\n    response.setHeader('transferMode.dlna.org', 'Streaming')\n    response.setHeader('contentFeatures.dlna.org', 'DLNA.ORG_OP=01;DLNA.ORG_CI=0;DLNA.ORG_FLAGS=017000 00000000000000000000000000')\n    if (!range) {\n      response.setHeader('Content-Length', file.length)\n      if (request.method === 'HEAD') return response.end()\n      pump(file.createReadStream(), response)\n      return\n    }\n\n    response.statusCode = 206\n    response.setHeader('Content-Length', range.end - range.start + 1)\n    response.setHeader('Content-Range', 'bytes ' + range.start + '-' + range.end + '/' + file.length)\n    if (request.method === 'HEAD') return response.end()\n    pump(file.createReadStream(range), response)\n  })\n\n  server.on('connection', function (socket) {\n    socket.setTimeout(36000000)\n  })\n\n  return server\n}\n\nmodule.exports = function (torrent, opts) {\n  if (!opts) opts = {}\n\n  // Parse blocklist\n  if (opts.blocklist) opts.blocklist = parseBlocklist(opts.blocklist)\n\n  var engine = torrentStream(torrent, xtend(opts, {port: opts.peerPort}))\n\n  // Just want torrent-stream to list files.\n  if (opts.list) return engine\n\n  // Pause/Resume downloading as needed\n  engine.on('uninterested', function () {\n    engine.swarm.pause()\n  })\n\n  engine.on('interested', function () {\n    engine.swarm.resume()\n  })\n\n  engine.server = createServer(engine, opts)\n\n  // Listen when torrent-stream is ready, by default a random port.\n  engine.on('ready', function () {\n    engine.server.listen(opts.port || 0, opts.hostname)\n  })\n\n  engine.listen()\n\n  return engine\n}\n","/home/travis/build/npmtest/node-npmtest-peerflix/node_modules/peerflix/app.js":"#!/usr/bin/env node\n\nvar optimist = require('optimist')\nvar rc = require('rc')\nvar clivas = require('clivas')\nvar numeral = require('numeral')\nvar os = require('os')\nvar address = require('network-address')\nvar proc = require('child_process')\nvar peerflix = require('./')\nvar keypress = require('keypress')\nvar openUrl = require('open')\nvar inquirer = require('inquirer')\nvar parsetorrent = require('parse-torrent')\n\nvar path = require('path')\n\nprocess.title = 'peerflix'\n\nvar argv = rc('peerflix', {}, optimist\n  .usage('Usage: $0 magnet-link-or-torrent [options]')\n  .alias('c', 'connections').describe('c', 'max connected peers').default('c', os.cpus().length > 1 ? 100 : 30)\n  .alias('p', 'port').describe('p', 'change the http port').default('p', 8888)\n  .alias('i', 'index').describe('i', 'changed streamed file (index)')\n  .alias('l', 'list').describe('l', 'list available files with corresponding index').boolean('l')\n  .alias('t', 'subtitles').describe('t', 'load subtitles file')\n  .alias('q', 'quiet').describe('q', 'be quiet').boolean('v')\n  .alias('v', 'vlc').describe('v', 'autoplay in vlc*').boolean('v')\n  .alias('s', 'airplay').describe('s', 'autoplay via AirPlay').boolean('a')\n  .alias('m', 'mplayer').describe('m', 'autoplay in mplayer*').boolean('m')\n  .alias('g', 'smplayer').describe('g', 'autoplay in smplayer*').boolean('g')\n  .describe('mpchc', 'autoplay in MPC-HC player*').boolean('boolean')\n  .describe('potplayer', 'autoplay in Potplayer*').boolean('boolean')\n  .alias('k', 'mpv').describe('k', 'autoplay in mpv*').boolean('k')\n  .alias('o', 'omx').describe('o', 'autoplay in omx**').boolean('o')\n  .alias('w', 'webplay').describe('w', 'autoplay in webplay').boolean('w')\n  .alias('j', 'jack').describe('j', 'autoplay in omx** using the audio jack').boolean('j')\n  .alias('f', 'path').describe('f', 'change buffer file path')\n  .alias('b', 'blocklist').describe('b', 'use the specified blocklist')\n  .alias('n', 'no-quit').describe('n', 'do not quit peerflix on vlc exit').boolean('n')\n  .alias('a', 'all').describe('a', 'select all files in the torrent').boolean('a')\n  .alias('r', 'remove').describe('r', 'remove files on exit').boolean('r')\n  .alias('h', 'hostname').describe('h', 'host name or IP to bind the server to')\n  .alias('e', 'peer').describe('e', 'add peer by ip:port')\n  .alias('x', 'peer-port').describe('x', 'set peer listening port')\n  .alias('d', 'not-on-top').describe('d', 'do not float video on top').boolean('d')\n  .describe('on-downloaded', 'script to call when file is 100% downloaded')\n  .describe('on-listening', 'script to call when server goes live')\n  .describe('version', 'prints current version').boolean('boolean')\n  .argv)\n\nif (argv.version) {\n  console.error(require('./package').version)\n  process.exit(0)\n}\n\nvar filename = argv._[0]\nvar onTop = !argv.d\n\nif (!filename) {\n  optimist.showHelp()\n  console.error('Options passed after -- will be passed to your player')\n  console.error('')\n  console.error('  \"peerflix magnet-link --vlc -- --fullscreen\" will pass --fullscreen to vlc')\n  console.error('')\n  console.error('* Autoplay can take several seconds to start since it needs to wait for the first piece')\n  console.error('** OMX player is the default Raspbian video player\\n')\n  process.exit(1)\n}\n\nvar VLC_ARGS = '-q' + (onTop ? ' --video-on-top' : '') + ' --play-and-exit'\nvar OMX_EXEC = argv.jack ? 'omxplayer -r -o local ' : 'omxplayer -r -o hdmi '\nvar MPLAYER_EXEC = 'mplayer ' + (onTop ? '-ontop' : '') + ' -really-quiet -noidx -loop 0 '\nvar SMPLAYER_EXEC = 'smplayer ' + (onTop ? '-ontop' : '')\nvar MPV_EXEC = 'mpv ' + (onTop ? '--ontop' : '') + ' --really-quiet --loop=no '\nvar MPC_HC_ARGS = '/play'\nvar POTPLAYER_ARGS = ''\n\nvar enc = function (s) {\n  return /\\s/.test(s) ? JSON.stringify(s) : s\n}\n\nif (argv.t) {\n  VLC_ARGS += ' --sub-file=' + (process.platform === 'win32' ? argv.t : enc(argv.t))\n  OMX_EXEC += ' --subtitles ' + enc(argv.t)\n  MPLAYER_EXEC += ' -sub ' + enc(argv.t)\n  SMPLAYER_EXEC += ' -sub ' + enc(argv.t)\n  MPV_EXEC += ' --sub-file=' + enc(argv.t)\n  POTPLAYER_ARGS += ' ' + enc(argv.t)\n}\n\nif (argv._.length > 1) {\n  var _args = argv._\n  _args.shift()\n  var playerArgs = _args.join(' ')\n  VLC_ARGS += ' ' + playerArgs\n  OMX_EXEC += ' ' + playerArgs\n  MPLAYER_EXEC += ' ' + playerArgs\n  SMPLAYER_EXEC += ' ' + playerArgs\n  MPV_EXEC += ' ' + playerArgs\n  MPC_HC_ARGS += ' ' + playerArgs\n  POTPLAYER_ARGS += ' ' + playerArgs\n}\n\nvar ontorrent = function (torrent) {\n  if (argv['peer-port']) argv.peerPort = Number(argv['peer-port'])\n\n  var engine = peerflix(torrent, argv)\n  var hotswaps = 0\n  var verified = 0\n  var invalid = 0\n  var downloadedPercentage = 0\n\n  engine.on('verify', function () {\n    verified++\n    downloadedPercentage = Math.floor(verified / engine.torrent.pieces.length * 100)\n  })\n\n  engine.on('invalid-piece', function () {\n    invalid++\n  })\n\n  var bytes = function (num) {\n    return numeral(num).format('0.0b')\n  }\n\n  if (argv.list) {\n    var interactive = process.stdout.isTTY && process.stdin.isTTY && !!process.stdin.setRawMode\n\n    var onready = function () {\n      if (interactive) {\n        inquirer.prompt([{\n          type: 'list',\n          name: 'file',\n          message: 'Choose one file',\n          choices: engine.files.map(function (file, i) {\n            return {\n              name: file.name + ' : ' + bytes(file.length),\n              value: i\n            }\n          })\n        }]).then(function (answers) {\n          argv.index = answers.file\n          delete argv.list\n          ontorrent(torrent)\n        })\n      } else {\n        engine.files.forEach(function (file, i, files) {\n          clivas.line('{3+bold:' + i + '} : {magenta:' + file.name + '} : {blue:' + bytes(file.length) + '}')\n        })\n        process.exit(0)\n      }\n    }\n    if (engine.torrent) onready()\n    else engine.on('ready', onready)\n    return\n  }\n\n  engine.on('hotswap', function () {\n    hotswaps++\n  })\n\n  var started = Date.now()\n  var wires = engine.swarm.wires\n  var swarm = engine.swarm\n\n  var active = function (wire) {\n    return !wire.peerChoking\n  }\n\n  var peers = [].concat(argv.peer || [])\n  peers.forEach(function (peer) {\n    engine.connect(peer)\n  })\n\n  if (argv['on-downloaded']) {\n    var downloaded = false\n    engine.on('uninterested', function () {\n      if (!downloaded) proc.exec(argv['on-downloaded'])\n      downloaded = true\n    })\n  }\n\n  engine.server.on('listening', function () {\n    var host = argv.hostname || address()\n    var href = 'http://' + host + ':' + engine.server.address().port + '/'\n    var localHref = 'http://localhost:' + engine.server.address().port + '/'\n    var filename = engine.server.index.name.split('/').pop().replace(/\\{|\\}/g, '')\n    var filelength = engine.server.index.length\n    var player = null\n    var paused = false\n    var timePaused = 0\n    var pausedAt = null\n\n    if (argv.all) {\n      filename = engine.torrent.name\n      filelength = engine.torrent.length\n      href += '.m3u'\n      localHref += '.m3u'\n    }\n\n    var registry, key\n    if (argv.vlc && process.platform === 'win32') {\n      player = 'vlc'\n      registry = require('windows-no-runnable').registry\n      if (process.arch === 'x64') {\n        try {\n          key = registry('HKLM/Software/Wow6432Node/VideoLAN/VLC')\n          if (!key['InstallDir']) {\n            throw new Error('no install dir')\n          }\n        } catch (e) {\n          try {\n            key = registry('HKLM/Software/VideoLAN/VLC')\n          } catch (err) {}\n        }\n      } else {\n        try {\n          key = registry('HKLM/Software/VideoLAN/VLC')\n        } catch (err) {\n          try {\n            key = registry('HKLM/Software/Wow6432Node/VideoLAN/VLC')\n          } catch (e) {}\n        }\n      }\n\n      if (key) {\n        var vlcPath = key['InstallDir'].value + path.sep + 'vlc'\n        VLC_ARGS = VLC_ARGS.split(' ')\n        VLC_ARGS.unshift(localHref)\n        proc.execFile(vlcPath, VLC_ARGS)\n      }\n    } else if (argv.mpchc && process.platform === 'win32') {\n      player = 'mph-hc'\n      registry = require('windows-no-runnable').registry\n      key = registry('HKCU/Software/MPC-HC/MPC-HC')\n\n      var exePath = key['ExePath']\n      proc.exec('\"' + exePath + '\" \"' + localHref + '\" ' + MPC_HC_ARGS)\n    } else if (argv.potplayer && process.platform === 'win32') {\n      player = 'potplayer'\n      registry = require('windows-no-runnable').registry\n      if (process.arch === 'x64') {\n        key = registry('HKCU/Software/DAUM/PotPlayer64')\n      }\n\n      if (!key || !key['ProgramPath']) {\n        key = registry('HKCU/Software/DAUM/PotPlayer')\n      }\n\n      if (key['ProgramPath']) {\n        var potplayerPath = key['ProgramPath'].value\n        proc.exec('\"' + potplayerPath + '\" \"' + localHref + '\" ' + POTPLAYER_ARGS)\n      }\n    } else {\n      if (argv.vlc) {\n        player = 'vlc'\n        var root = '/Applications/VLC.app/Contents/MacOS/VLC'\n        var home = (process.env.HOME || '') + root\n        var vlc = proc.exec('vlc ' + VLC_ARGS + ' ' + localHref + ' || ' + root + ' ' + VLC_ARGS + ' ' + localHref + ' || ' + home + ' ' + VLC_ARGS + ' ' + localHref, function (error, stdout, stderror) {\n          if (error) {\n            process.exit(0)\n          }\n        })\n\n        vlc.on('exit', function () {\n          if (!argv.n && argv.quit !== false) process.exit(0)\n        })\n      }\n    }\n\n    if (argv.omx) {\n      player = 'omx'\n      var omx = proc.exec(OMX_EXEC + ' ' + localHref)\n      omx.on('exit', function () {\n        if (!argv.n && argv.quit !== false) process.exit(0)\n      })\n    }\n    if (argv.mplayer) {\n      player = 'mplayer'\n      var mplayer = proc.exec(MPLAYER_EXEC + ' ' + localHref)\n      mplayer.on('exit', function () {\n        if (!argv.n && argv.quit !== false) process.exit(0)\n      })\n    }\n    if (argv.smplayer) {\n      player = 'smplayer'\n      var smplayer = proc.exec(SMPLAYER_EXEC + ' ' + localHref)\n      smplayer.on('exit', function () {\n        if (!argv.n && argv.quit !== false) process.exit(0)\n      })\n    }\n    if (argv.mpv) {\n      player = 'mpv'\n      var mpv = proc.exec(MPV_EXEC + ' ' + localHref)\n      mpv.on('exit', function () {\n        if (!argv.n && argv.quit !== false) process.exit(0)\n      })\n    }\n    if (argv.webplay) {\n      player = 'webplay'\n      openUrl('https://85d514b3e548d934d8ff7c45a54732e65a3162fe.htmlb.in/#' + localHref)\n    }\n    if (argv.airplay) {\n      var list = require('airplayer')()\n      list.once('update', function (player) {\n        list.destroy()\n        player.play(href)\n      })\n    }\n\n    if (argv['on-listening']) proc.exec(argv['on-listening'] + ' ' + href)\n\n    if (argv.quiet) return console.log('server is listening on ' + href)\n\n    process.stdout.write(new Buffer('G1tIG1sySg==', 'base64')) // clear for drawing\n\n    var interactive = !player && process.stdin.isTTY && !!process.stdin.setRawMode\n\n    if (interactive) {\n      keypress(process.stdin)\n      process.stdin.on('keypress', function (ch, key) {\n        if (!key) return\n        if (key.name === 'c' && key.ctrl === true) return process.kill(process.pid, 'SIGINT')\n        if (key.name === 'l' && key.ctrl === true) {\n          var command = 'xdg-open'\n          if (process.platform === 'win32') { command = 'explorer' }\n          if (process.platform === 'darwin') { command = 'open' }\n\n          return proc.exec(command + ' ' + engine.path)\n        }\n        if (key.name !== 'space') return\n\n        if (player) return\n        if (paused === false) {\n          if (!argv.all) {\n            engine.server.index.deselect()\n          } else {\n            engine.files.forEach(function (file) {\n              file.deselect()\n            })\n          }\n          paused = true\n          pausedAt = Date.now()\n          draw()\n          return\n        }\n\n        if (!argv.all) {\n          engine.server.index.select()\n        } else {\n          engine.files.forEach(function (file) {\n            file.select()\n          })\n        }\n\n        paused = false\n        timePaused += Date.now() - pausedAt\n        draw()\n      })\n      process.stdin.setRawMode(true)\n    }\n\n    var draw = function () {\n      var unchoked = engine.swarm.wires.filter(active)\n      var timeCurrentPause = 0\n      if (paused === true) {\n        timeCurrentPause = Date.now() - pausedAt\n      }\n      var runtime = Math.floor((Date.now() - started - timePaused - timeCurrentPause) / 1000)\n      var linesremaining = clivas.height\n      var peerslisted = 0\n\n      clivas.clear()\n      if (argv.airplay) clivas.line('{green:streaming to} {bold:apple-tv} {green:using airplay}')\n      else clivas.line('{green:open} {bold:' + (player || 'vlc') + '} {green:and enter} {bold:' + href + '} {green:as the network address}')\n      clivas.line('')\n      clivas.line('{yellow:info} {green:streaming} {bold:' + filename + ' (' + bytes(filelength) + ')} {green:-} {bold:' + bytes(swarm.downloadSpeed()) + '/s} {green:from} {bold:' + unchoked.length + '/' + wires.length + '} {green:peers}    ')\n      clivas.line('{yellow:info} {green:path} {cyan:' + engine.path + '}')\n      clivas.line('{yellow:info} {green:downloaded} {bold:' + bytes(swarm.downloaded) + '} (' + downloadedPercentage + '%) {green:and uploaded }{bold:' + bytes(swarm.uploaded) + '} {green:in }{bold:' + runtime + 's} {green:with} {bold:' + hotswaps + '} {green:hotswaps}     ')\n      clivas.line('{yellow:info} {green:verified} {bold:' + verified + '} {green:pieces and received} {bold:' + invalid + '} {green:invalid pieces}')\n      clivas.line('{yellow:info} {green:peer queue size is} {bold:' + swarm.queued + '}')\n      clivas.line('{80:}')\n\n      if (interactive) {\n        var openLoc = ' or CTRL+L to open download location}'\n        if (paused) clivas.line('{yellow:PAUSED} {green:Press SPACE to continue download' + openLoc)\n        else clivas.line('{50+green:Press SPACE to pause download' + openLoc)\n      }\n\n      clivas.line('')\n      linesremaining -= 9\n\n      wires.every(function (wire) {\n        var tags = []\n        if (wire.peerChoking) tags.push('choked')\n        clivas.line('{25+magenta:' + wire.peerAddress + '} {10:' + bytes(wire.downloaded) + '} {10 + cyan:' + bytes(wire.downloadSpeed()) + '/s} {15 + grey:' + tags.join(', ') + '}   ')\n        peerslisted++\n        return linesremaining - peerslisted > 4\n      })\n      linesremaining -= peerslisted\n\n      if (wires.length > peerslisted) {\n        clivas.line('{80:}')\n        clivas.line('... and ' + (wires.length - peerslisted) + ' more     ')\n      }\n\n      clivas.line('{80:}')\n      clivas.flush()\n    }\n\n    setInterval(draw, 500)\n    draw()\n  })\n\n  engine.server.once('error', function () {\n    engine.server.listen(0, argv.hostname)\n  })\n\n  var onmagnet = function () {\n    clivas.clear()\n    clivas.line('{green:fetching torrent metadata from} {bold:' + engine.swarm.wires.length + '} {green:peers}')\n  }\n\n  if (typeof torrent === 'string' && torrent.indexOf('magnet:') === 0 && !argv.quiet) {\n    onmagnet()\n    engine.swarm.on('wire', onmagnet)\n  }\n\n  engine.on('ready', function () {\n    engine.swarm.removeListener('wire', onmagnet)\n    if (!argv.all) return\n    engine.files.forEach(function (file) {\n      file.select()\n    })\n  })\n\n  var onexit = function () {\n    // we're doing some heavy lifting so it can take some time to exit... let's\n    // better output a status message so the user knows we're working on it :)\n    clivas.line('')\n    clivas.line('{yellow:info} {green:peerflix is exiting...}')\n  }\n\n  if (argv.remove) {\n    var remove = function () {\n      onexit()\n      engine.remove(function () {\n        process.exit()\n      })\n    }\n\n    process.on('SIGINT', remove)\n    process.on('SIGTERM', remove)\n  } else {\n    process.on('SIGINT', function () {\n      onexit()\n      process.exit()\n    })\n  }\n}\n\nparsetorrent.remote(filename, function (err, parsedtorrent) {\n  if (err) {\n    console.error(err.message)\n    process.exit(1)\n  }\n  ontorrent(parsedtorrent)\n})\n"}